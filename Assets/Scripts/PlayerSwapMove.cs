//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerSwapMove.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerSwapMove : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerSwapMove()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerSwapMove"",
    ""maps"": [
        {
            ""name"": ""SwapMove"",
            ""id"": ""32764f7f-1731-4298-9aa2-b515ddaa9085"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8eb9fc5b-e22e-46c9-9131-32ab20ba66ad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e053d6ea-2972-4734-b89a-f83ab1cd6a44"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1d242989-fe5d-41bf-a677-14e363b544cc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9c50b072-7f5b-45da-aa73-10150dffb10c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f0e63032-d305-4165-bbdd-c7b76920412d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a631274d-4e3f-4f08-8365-d249d1773ce8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aee9baaf-540d-4c9f-8723-6e72d3c09eb7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""01cc5888-f256-475a-ad13-90eec3a5d03e"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SwapMove
        m_SwapMove = asset.FindActionMap("SwapMove", throwIfNotFound: true);
        m_SwapMove_Move = m_SwapMove.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwapMove
    private readonly InputActionMap m_SwapMove;
    private ISwapMoveActions m_SwapMoveActionsCallbackInterface;
    private readonly InputAction m_SwapMove_Move;
    public struct SwapMoveActions
    {
        private @PlayerSwapMove m_Wrapper;
        public SwapMoveActions(@PlayerSwapMove wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_SwapMove_Move;
        public InputActionMap Get() { return m_Wrapper.m_SwapMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwapMoveActions set) { return set.Get(); }
        public void SetCallbacks(ISwapMoveActions instance)
        {
            if (m_Wrapper.m_SwapMoveActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_SwapMoveActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_SwapMoveActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_SwapMoveActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_SwapMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public SwapMoveActions @SwapMove => new SwapMoveActions(this);
    public interface ISwapMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
